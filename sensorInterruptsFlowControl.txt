

MUST APPLY POLL_SENSORS macro before release.

Cases:

DONE	1.	Poll all sensors with Sparkfun TSL library (does not turn sensors off) on call to pollSensors
REJ	2.	Poll all sensors with DMA on call to pollSensors (does turn sensors off to get reading)
DONE	3.	Poll selected sensors with TSL library (does not turn sensors off) on call to pollSensors
REJ	4.	Poll selected sensors with DMA on call to pollSensors (does turn sensors off to get reading)
	5.	On call to pollSensors, read GPIO to see if any sensors have asserted an end of conversion interrupt, 		if they have, poll the relevant sensors using TSL libary and clear the sensor interrupt, finally read 			GPIO to clear interrupt(s).
	6.	On call to pollSensors, read GPIO to see if any sensors have asserted an end of conversion interrupt, 		if they have, poll the relevant sensors using DMA and clear the sensor interrupt, finally read GPIO to 			clear interupts(s)
	7.	On call to pollSensors, read GPIO to see if any sensors have asserted an threshold change interrupt, if 		they have, send the new threshold to the relevant sensors using the TSL library and clear the sensor 			interrupt, finally read GPIO to clear interrupt(s).
	8.	On call to pollSensors, read GPIO to see if any sensors have asserted a threshold change interrupt, if 		they have, send the new threshold to the relevant sensors using DMA and clear the sensor interrupt, 			finally read GPIO to clear interrupts(s).
	9.	On external interrupt, read GPIO using bit bashing to see which sensors have asserted an end of 		conversion interrupt, poll the relevant sensors using bit bashing, clear the sensor interrupt using bit 		bashing, finally read GPIO using bit bashing to clear interrupt.
	10.	On external interrupt, read GPIO using bit bashing to see which sensor has asserted a threshold change 		interrupt, send the new threshold to the relevant sensor using bit bashing and clear the interrupt bit 			using bit bashing, finally read GPIO to clear interrupt using bit bashing.


if arduinoInterruptMode
	9
	10
	POLL_SENSORS(Sensors, _VAARGS_)
else
	
	if sensorInterruptModeThres
		POLL_SENSORS(Sensors, _VARGS_)	Sensors::pollSensors(Sensors)
		if SparkTSL
			7
		else
			8
	elif sensorInterruptModeConv
		POLL_SENSORS(Sensors, _VARGS_)	Sensors::pollSensors(Sensors)
		if SparkTSL
			5
		else
			6
	elif pollSelected
		POLL_SENSORS(Sensors, _VARGS_)	Sensors::pollSensors(Sensors, sensorGroup, sensorGroupSize)
		if SparkTSL
			3
		else
			4
	else //pollAll
		POLL_SENSORS(Sensors, _VARGS_)	Sensors::pollSensors(Sensors)
		if SparkTSL
			1
		else
			2
	endif
endif











Do Once:

Configure Arduino:
	Create sensor object
	create gpio object

Select each sensor in turn and configure:
	integration time (variable from PC with default value)
	gain (variable from PC with default value)
	interrupt persistence (variable from PC with default value)
	initial interrupt theshold (variable from PC with default value)

Configure GPIO expander
	set pin modes
	enable interrupts

Do Repeatedly:

without interrupts
IF GPIO interrupt
	byte numSensorsActive = 0;
	for (i = 0; i<8; i++) {
		if (digitalRead(i) == HIGH)
		numSensorsActive++;
	}
	
	while (numSensorsActive != 0) {
		IF junctionsensors
			IF junctionsensor1
				timestamp t1
				toggle threshold values
				clear interrupt
			ELSE IF junctionsensor2
				timestamp t2
				toggle threshold values
				clear interrupt
			ENDIF

			IF (bool fired)
				IF abs(t2-t1) < X
					Declare junction reached
					fired = false
				ELSE
					Drift occured
					fired still equals true
				ENDIF
			ELSE
				fired = true
			ENDIF
			
		ELSE othersensors

			select correct sensor
			toggle threshold values
			clear interrupt
		ENDIF

		numSensorsActive--;
			}










According to post 10 on http://forum.arduino.cc/index.php?topic=71250.0 I2C operations in an interrupt service routine are possible
The length of operations required likely prohibit performing them all (reading GPIO, resetting thresholds, clearing sensor interrupts, clearing gpio interrupts) in one routine.
Using a second uno based board may be possible and bears further investigation.


moveForward flow control proposal 1:
	LOOP {
	Poll all sensors
	Check for drift
	IF NO DRIFT {
		motor drive function will utilise the encoders to equalise the speed of the wheels.  The equalisation maths can be done in a blocking fashion if fast enough,
			the pulse counting will almost certainly have to be interrupt based either with external interrupt/counter (research needs doing into this)

		//If this process is either too slow or requires multiple passes to maintain accuracy then it can be setup on a timer interrupt however THIS MUST BE
		//	DETACHABLE/REATTACHABLE	WITHOUT FAILING to allow for sensor interrupt operations if implemented.
		}
	IF DRIFT {
		Pass differing speeds to motor drive functions, these speeds are used to weight the speed equalisation calculation
		}
	}

	Sensor interrupts may be implemented if required and if they are will require a single interrupt, either external (preferred) or if not
		available one of the 2 pin change interrupts.  Note if implemented sensor interrupts will require the enabling of interrupts
		INSIDE THE ISR and so it must be possible to explicitly deattach any interrupts used for the encoders to allow this.

	Polling all sensors currently takes in the order of 3-4ms, giving a theoretical frequency of 300Hz assuming no other operations.  This will obviously be much less
		once other nav code is in place, though is a massive improvement on the max 9Hz operations before.

	IMPLEMENTATION NOTE:	micros() does INCREMENT in an ISR, BUT ONLY UP TO 1000, millis() does not, but can be used to timestamp when the ISR was entered.

turnRight/Left flow control
	LOOP {
		Poll all sensors
		call motor drive in opposite directions with equivalent speeds
		motor drive functions will utilise the absolute values returned by the encoders to equalise the speed of the wheels
		}